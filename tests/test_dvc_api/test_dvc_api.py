import nautilus_librarian.nautilus_dvc_api.nautilus_dvc_api as dvcapi
from git import Repo
import tempfile
import os.path
from os import path


# temp_dir will store the File object pointing to the temporary directory that will store
# all the objects generated by each tests


temp_dir = None


# If the following variable has some path value (e.g. "/tmp/testObjects"), test contest will be
# stored there, instead on a random temporary folder. Useful for debugging tests.


test_dir = None



def create_test_contents():
    with open(path.join(get_test_dir(), "test.data"), 'w') as file:
        file.write('lorem ipsum')


def get_test_dir():
    if test_dir == None:
        return temp_dir.name
    else:
        return test_dir


def create_test_scenario(init_GIT=False, init_DVC=False, create_contents=False):    
    global temp_dir
    temp_dir = tempfile.TemporaryDirectory()   
    os.chdir(get_test_dir())
    if(init_GIT):
        Repo.init(get_test_dir())
    if(init_DVC):
        dvcapi.init(get_test_dir(), no_scm=(not init_GIT))
    if(create_contents):
        create_test_contents()
    return


def add_remote_to_scenario():
    remoteTempDir=tempfile.TemporaryDirectory()
    os.system("dvc remote add -d localremote " + remoteTempDir.name )


def clean_up_test_scenario():
    temp_dir.cleanup()


def test_dvc_init():
    create_test_scenario(init_GIT=True, init_DVC=True)
    assert path.exists(".dvc")
    clean_up_test_scenario()


def test_dvc_standalone_init():
    create_test_scenario(init_DVC=True)
    assert path.exists(".dvc")
    clean_up_test_scenario()

def test_add():
    create_test_scenario(init_GIT=True, init_DVC=True, create_contents=True)
    dvcapi.add(get_test_dir(), "test.data")
    assert path.exists("test.data.dvc")
    assert path.exists(".gitignore")


def test_status():
    create_test_scenario(init_GIT=True, init_DVC=True, create_contents=True)
    dvcapi.add(get_test_dir(), "test.data")
    add_remote_to_scenario()
    assert dvcapi.status(get_test_dir(), remote="localremote") == {'test.data': 'new'}
